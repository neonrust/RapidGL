#include "shared-structs.glh"
#include "area_light_ltc.glh"

#ifndef PI
    #define PI 3.141592653589793238462643
#endif

const float MAX_REFLECTION_LOD = 4.0; // mips in range [0, 4]

layout (location = 0) in vec2 in_texcoord;
layout (location = 1) in vec3 in_world_pos;
layout (location = 2) in vec3 in_view_pos;
layout (location = 3) in vec4 in_clip_pos;
layout (location = 4) in vec3 in_normal;

layout(binding = 0) uniform sampler2D u_albedo_map;
layout(binding = 1) uniform sampler2D u_normal_map;
layout(binding = 2) uniform sampler2D u_metallic_map;
layout(binding = 3) uniform sampler2D u_roughness_map;
layout(binding = 4) uniform sampler2D u_ao_map;
layout(binding = 5) uniform sampler2D u_emissive_map;

layout (binding = 6) uniform samplerCube u_irradiance_map;
layout (binding = 7) uniform samplerCube u_prefiltered_map;
layout (binding = 8) uniform sampler2D   u_brdf_lut;
// 9, 10 is in area_light_ltc.glh
layout (binding = 20) uniform sampler2D  u_shadow_atlas;
layout (binding = 21) uniform sampler2D  u_shadow_atlas_normals;

uniform bool u_has_albedo_map;
uniform bool u_has_normal_map;
uniform bool u_has_metallic_map;
uniform bool u_has_roughness_map;
uniform bool u_has_ao_map;
uniform bool u_has_emissive_map;

uniform vec3  u_albedo;
uniform float u_metallic;
uniform float u_roughness;
uniform float u_ao;
uniform vec3  u_emission;

uniform vec3  u_cam_pos;

struct MaterialProperties
{
    vec3 albedo;
    vec3 normal;
    vec3 emission;
    float metallic;
    float roughness;
    float ao;
    float opacity;
};

vec3 getNormalFromMap()
{
    vec3 tangent_normal = texture(u_normal_map, in_texcoord).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(in_world_pos);
    vec3 Q2  = dFdy(in_world_pos);
    vec2 st1 = dFdx(in_texcoord);
    vec2 st2 = dFdy(in_texcoord);

    vec3 N   = normalize(in_normal);
    vec3 T   = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B   = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangent_normal);
}

MaterialProperties getMaterialProperties(vec3 normal)
{
    MaterialProperties material;

    vec4 albedo_opacity = texture(u_albedo_map, in_texcoord);
    material.albedo    = u_has_albedo_map    ? albedo_opacity.rgb                       : u_albedo;
    material.emission  = u_has_emissive_map  ? texture(u_emissive_map, in_texcoord).rgb : u_emission;
    material.normal    = u_has_normal_map    ? getNormalFromMap()                       : normal;
    material.metallic  = u_has_metallic_map  ? texture(u_metallic_map, in_texcoord).b   : u_metallic;
    material.roughness = u_has_roughness_map ? texture(u_roughness_map, in_texcoord).g  : u_roughness;
    material.ao        = u_has_ao_map        ? texture(u_ao_map, in_texcoord).r         : u_ao;
    material.opacity   = albedo_opacity.a;

    return material;
}

float linearDepth(float depth, float z_near, float z_far)
{
    float ndc = depth * 2.0 - 1.0;
    float linear_depth = 2.0 * z_near * z_far / (z_far + z_near - ndc * (z_far - z_near));

    return linear_depth;
}

vec3 fresnelSchlick(float cos_theta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cos_theta, 0.0), 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

float distributionGGX(vec3 n, vec3 h, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(n, h), 0.0);
    float NdotH2 = NdotH * NdotH;

    float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / max(denom, 1e-5);
}

float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / max(denom, 1e-5);
}

float geometrySmith(vec3 n, vec3 wo, vec3 wi, float roughness)
{
    float NdotV = max(dot(n, wo), 0.0);
    float NdotL = max(dot(n, wi), 0.0);

    float ggx1 = geometrySchlickGGX(NdotL, roughness);
    float ggx2 = geometrySchlickGGX(NdotV, roughness);

    return ggx1 * ggx2;
}

vec3 indirectLightingIBL(vec3 world_pos, MaterialProperties material)
{
    vec3 wo = normalize(u_cam_pos - world_pos);
    vec3 r  = reflect(-wo, material.normal);

    // fresnel reflectance
    vec3 F0 = vec3(0.04);
         F0 = mix(F0, material.albedo, material.metallic);

    vec3 F  = fresnelSchlickRoughness(max(dot(material.normal, wo), 0.0), F0, material.roughness);
    vec3 ks = F;
    vec3 kd = 1.0 - ks;
         kd = kd * (1.0 - material.metallic);

    // diffuse IBL term
    vec3 irradiance = texture(u_irradiance_map, material.normal).rgb;
    vec3 diffuse    = material.albedo * irradiance;

    // specular IBL term
    vec3 prefiletered_color = textureLod(u_prefiltered_map, r, material.roughness * MAX_REFLECTION_LOD).rgb;
    vec2 brdf               = texture(u_brdf_lut, vec2(max(dot(material.normal, wo), 0.0), material.roughness)).rg;
    vec3 specular           =  prefiletered_color * (F * brdf.x + brdf.y);

    // total indirect lighting
    return (kd * diffuse + specular) * material.ao;
}

vec3 pbr(GPULight light, vec3 direction, vec3 world_pos, float attenuation, MaterialProperties material)
{
    vec3 wo         = normalize(u_cam_pos - world_pos);
    vec3 radiance   = vec3(0);

    // fresnel reflectance at normal incidence
    vec3 F0 = vec3(0.04); // base reflectance
         F0 = mix(F0, material.albedo, material.metallic);

    // calculate radiance
    {
        vec3 wi               = normalize(direction);
        vec3 h                = normalize(wo + wi);
        vec3 light_irradiance = light.color * light.intensity;

        // cook-torrance brdf
        float NDF = distributionGGX(material.normal, h, material.roughness);
        float G   = geometrySmith(material.normal, wo, wi, material.roughness);
        vec3  F   = fresnelSchlick(max(dot(h, wo), 0.0), F0);

        float NdotL    = max(dot(material.normal, wi), 0.0);
        vec3  num      = NDF * G * F;
        float denom    = 4.0 * max(dot(material.normal, wo), 0.0) * NdotL;
        vec3  specular = num / max(denom, 1e-5);

        vec3 ks = F;
        vec3 kd = 1.0 - ks;
             kd = kd * (1.0 - material.metallic);

        radiance += (kd * material.albedo / PI + specular) * light_irradiance * NdotL * attenuation;
    }

    return radiance;
}

// source: https://google.github.io/filament/Filament.md.html
float getSquareFalloffAttenuation(vec3 pos_to_light, float light_inv_radius)
{
    float distance_square = dot(pos_to_light, pos_to_light);
    float factor          = distance_square * light_inv_radius * light_inv_radius;
    float smooth_factor   = max(1.0 - factor * factor, 0.0);

    return (smooth_factor * smooth_factor) / max(distance_square, 1e-5);
}

// source: https://google.github.io/filament/Filament.md.html
float getSpotAngleAttenuation(vec3 l, vec3 light_dir, float inner_angle, float outer_angle)
{
    // the scale and offset computations can be done CPU-side
    float cos_outer   = cos(outer_angle);
    float spot_scale  = 1.0 / max(cos(inner_angle) - cos_outer, 1e-5);
    float spot_offset = -cos_outer * spot_scale;

    float cd          = dot(normalize(-light_dir), l);
    float attenuation = clamp(cd * spot_scale + spot_offset, 0.0, 1.0);

    return attenuation * attenuation;
}

vec3 calcDirectionalLight(GPULight light, vec3 world_pos, MaterialProperties material)
{
    return pbr(light, -light.direction, world_pos, 1.0, material);
}

vec3 calcPointLight(GPULight light, vec3 world_pos, MaterialProperties material)
{
    vec3  light_direction = light.position - world_pos;
    float attenuation     = getSquareFalloffAttenuation(light_direction, 1.0 / light.radius);

    return pbr(light, light_direction, world_pos, attenuation, material);
}

vec3 calcSpotLight(GPULight light, vec3 world_pos, MaterialProperties material)
{
    vec3  L            = normalize(world_pos - light.position);
    vec3  pos_to_light = light.position - world_pos;

    float attenuation     = getSquareFalloffAttenuation(pos_to_light, 1.0 / light.radius);
          attenuation    *= getSpotAngleAttenuation(L, -light.direction, light.inner_angle, light.outer_angle);
    vec3  light_direction = pos_to_light;

    return pbr(light, light_direction, world_pos, attenuation, material);
}

vec3 calcLtcAreaLight(GPULight light, vec3 world_pos, MaterialProperties material)
{
	// NOTE: this is not full PBR

    vec3 F0         = vec3(0.04); // base reflectance
    vec3 diff_color = material.albedo * (1.0 - material.metallic);
    vec3 spec_color = mix(F0, material.albedo, material.metallic);

    vec3  N         = material.normal;
    vec3  V         = normalize(u_cam_pos - world_pos);
    float cos_theta = max(dot(N, V), 0.0);

	bool two_sided = (light.type_flags & LIGHT_TWO_SIDED) > 0;

    // diffuse term
    vec3 diff  = ltcEvaluate(N, V, world_pos, mat3(1), light.area_points, two_sided);
         diff *= diff_color * light.color;

    // specular term
    vec2 coords  = ltcCoords(cos_theta, material.roughness);
    mat3 Minv    = ltcMatrix(s_ltc_mat, coords);
    vec2 schlick = texture2D(s_ltc_amp, coords).xy;

    vec3 spec  = ltcEvaluate(N, V, world_pos, Minv, light.area_points, two_sided);
         spec *= spec_color * schlick.x + (1.0 - spec_color) * schlick.y;

    vec3 radiance  = light.intensity * (diff + spec);
         radiance /= 2.0 * PI;

    return radiance;
}
