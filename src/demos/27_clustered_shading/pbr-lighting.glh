#define PI 3.141592653589793238462643
const float MAX_REFLECTION_LOD = 4.0; // mips in range [0, 4]

out vec4 frag_color;

layout (location = 0) in vec2 in_texcoord;
layout (location = 1) in vec3 in_world_pos;
layout (location = 2) in vec3 in_normal;

layout(binding = 0) uniform sampler2D u_albedo_map;
layout(binding = 1) uniform sampler2D u_normal_map;
layout(binding = 2) uniform sampler2D u_metallic_map;
layout(binding = 3) uniform sampler2D u_roughness_map;
layout(binding = 4) uniform sampler2D u_ao_map;
layout(binding = 5) uniform sampler2D u_emissive_map;

layout (binding = 6) uniform samplerCube u_irradiance_map;
layout (binding = 7) uniform samplerCube u_prefiltered_map;
layout (binding = 8) uniform sampler2D   u_brdf_lut;

uniform bool u_has_albedo_map;
uniform bool u_has_normal_map;
uniform bool u_has_metallic_map;
uniform bool u_has_roughness_map;
uniform bool u_has_ao_map;
uniform bool u_has_emissive_map;

uniform vec3  u_cam_pos;

uniform vec3  u_albedo;
uniform float u_metallic;
uniform float u_roughness;
uniform float u_ao;
uniform vec3  u_emission;

uniform float u_z_near;
uniform float u_z_far;
uniform float u_slice_scale;
uniform float u_slice_bias;
uniform bool u_debug_slices;

vec3 debug_colors[8] = vec3[](
   vec3(0.5, 0.2, 0.4),    vec3( 0,  0,  1), vec3( 0, 1, 0),  vec3(0, 1,  1),
   vec3(1,  0,  0),  vec3( 1,  0,  1), vec3( 1, 1, 0),  vec3(1, 1, 1)
);

struct BaseLight
{
    vec3 color;
    float intensity;
};

struct DirectionalLight
{
    BaseLight base;
    vec3 direction;
};

struct PointLight
{
    BaseLight base;
    vec3 position;
    float radius;
};

struct SpotLight
{
    PointLight point;
    vec3 direction;
    float inner_angle;
    float outer_angle;
};

float linearDepth(float depth)
{
	float ndc = depth * 2.0 - 1.0;
	float linear_depth = 2.0 * u_z_near * u_z_far / (u_z_far + u_z_near - ndc * (u_z_far - u_z_near));
	
	return linear_depth;
}

vec3 getNormalFromMap()
{
    vec3 tangent_normal = texture(u_normal_map, in_texcoord).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(in_world_pos);
    vec3 Q2  = dFdy(in_world_pos);
    vec2 st1 = dFdx(in_texcoord);
    vec2 st2 = dFdy(in_texcoord);

    vec3 N   = normalize(in_normal);
    vec3 T   = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B   = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangent_normal);
}

vec3 fresnelSchlick(float cos_theta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(max(1.0 - cos_theta, 0.0), 5.0);
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}  

float distributionGGX(vec3 n, vec3 h, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(n, h), 0.0);
    float NdotH2 = NdotH * NdotH;

    float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / max(denom, 1e-5);
}

float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / max(denom, 1e-5);
}

float geometrySmith(vec3 n, vec3 wo, vec3 wi, float roughness)
{
    float NdotV = max(dot(n, wo), 0.0);
    float NdotL = max(dot(n, wi), 0.0);

    float ggx1 = geometrySchlickGGX(NdotL, roughness);
    float ggx2 = geometrySchlickGGX(NdotV, roughness);

    return ggx1 * ggx2;
}

vec3 indirectLightingDiffuse(vec3 normal, vec3 world_pos)
{
	vec4 albedo_opacity = texture(u_albedo_map, in_texcoord);

	if (albedo_opacity.a < 0.5)
	    discard;

    vec3  albedo    = u_has_albedo_map    ? albedo_opacity.rgb                       : u_albedo;
    float metallic  = u_has_metallic_map  ? texture(u_metallic_map, in_texcoord).b   : u_metallic;
    float roughness = u_has_roughness_map ? texture(u_roughness_map, in_texcoord).g  : u_roughness;
    float ao        = u_has_ao_map        ? texture(u_ao_map, in_texcoord).r         : u_ao;
          normal    = u_has_normal_map    ? getNormalFromMap()                       : normal;
	vec3 emission   = u_has_emissive_map  ? texture(u_emissive_map, in_texcoord).rgb : u_emission;

    vec3 wo = normalize(u_cam_pos - world_pos);
    vec3 r  = reflect(-wo, normal);

    // fresnel reflectance
    vec3 F0 = vec3(0.04);
         F0 = mix(F0, albedo, metallic);

    vec3 F  = fresnelSchlickRoughness(max(dot(normal, wo), 0.0), F0, roughness);
    vec3 ks = F;
    vec3 kd = 1.0 - ks;
         kd = kd * (1.0 - metallic);
    
    // diffuse IBL term
    vec3 irradiance = texture(u_irradiance_map, normal).rgb;
    vec3 diffuse    = albedo * irradiance;

    // specular IBL term
    vec3 prefiletered_color = textureLod(u_prefiltered_map, r, roughness * MAX_REFLECTION_LOD).rgb;
    vec2 brdf               = texture(u_brdf_lut, vec2(max(dot(normal, wo), 0.0), roughness)).rg;
    vec3 specular           =  prefiletered_color * (F * brdf.x + brdf.y);

	uint z_tile = uint(max(log2(linearDepth(gl_FragCoord.z)) * u_slice_scale + u_slice_bias, 0.0));

	if (u_debug_slices)
	{
		return debug_colors[z_tile % 8];
	}
	else
	{
		// total indirect lighting
		return (kd * diffuse + specular) * ao + emission;
	}
}

vec3 pbr(BaseLight base, vec3 direction, vec3 normal, vec3 world_pos)
{
    vec3  albedo    = u_has_albedo_map    ? texture(u_albedo_map, in_texcoord).rgb   : u_albedo;
    float metallic  = u_has_metallic_map  ? texture(u_metallic_map, in_texcoord).b   : u_metallic;
    float roughness = u_has_roughness_map ? texture(u_roughness_map, in_texcoord).g  : u_roughness;
          normal    = u_has_normal_map    ? getNormalFromMap()                       : normal;

    vec3 wo          = normalize(u_cam_pos - world_pos);
    vec3 wi          = normalize(direction);
    vec3 h           = normalize(wo + wi);
    vec3 radiance    = base.color * base.intensity;

    // fresnel reflectance
    vec3 F0 = vec3(0.04);
         F0 = mix(F0, albedo, metallic);
    vec3 F  = fresnelSchlick(max(dot(h, wo), 0.0), F0);

    // cook-torrance brdf
    float NDF = distributionGGX(normal, h, roughness);
    float G   = geometrySmith(normal, wo, wi, roughness);

    float NdotL    = max(dot(normal, wi), 0.0);
    vec3  num      = NDF * G * F;
    float denom    = 4.0 * max(dot(normal, wo), 0.0) * NdotL;
    vec3  specular = num / max(denom, 1e-5);

    vec3 ks = F;
    vec3 kd = 1.0 - ks;
         kd = kd * (1.0 - metallic);

    return (kd * albedo / PI + specular) * radiance * NdotL;
}

float getSquareFalloffAttenuation(vec3 pos_to_light, float light_inv_radius) 
{
    float distance_square = dot(pos_to_light, pos_to_light);
    float factor          = distance_square * light_inv_radius * light_inv_radius;
    float smooth_factor   = max(1.0 - factor * factor, 0.0);

    return (smooth_factor * smooth_factor) / max(distance_square, 1e-5);
}

float getSpotAngleAttenuation(vec3 l, vec3 light_dir, float inner_angle, float outer_angle) 
{
    // the scale and offset computations can be done CPU-side
    float cos_outer   = cos(outer_angle);
    float spot_scale  = 1.0 / max(cos(inner_angle) - cos_outer, 1e-5);
    float spot_offset = -cos_outer * spot_scale;

    float cd          = dot(normalize(-light_dir), l);
    float attenuation = clamp(cd * spot_scale + spot_offset, 0.0, 1.0);

    return attenuation * attenuation;
}

vec3 calcDirectionalLight(DirectionalLight light, vec3 normal, vec3 world_pos)
{
    return pbr(light.base, -light.direction, normal, world_pos);
}

vec3 calcPointLight(PointLight light, vec3 normal, vec3 world_pos)
{
    vec3  light_direction = light.position - world_pos;
    float attenuation     = getSquareFalloffAttenuation(light_direction, 1.0 / max(light.radius, 1e-5));

    return pbr(light.base, light_direction, normal, world_pos) * attenuation;
}

vec3 calcSpotLight(SpotLight light, vec3 normal, vec3 world_pos)
{
    vec3  l           = normalize(world_pos - light.point.position);
    float attenuation = getSpotAngleAttenuation(l, -light.direction, light.inner_angle, light.outer_angle);

    return calcPointLight(light.point, normal, world_pos) * attenuation;
}