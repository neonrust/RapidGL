#include "../light_constants.h"  // IWYU pragma: keep
#include "../buffer_binds.h"

#ifdef __cplusplus
// simply to make it look nicer in the IDE ;)
using vec3 = int;
using vec4 = int;
using uvec3 = int;
using uvec4 = int;
using uint = int;
using mat4 = int;
#endif

// @interop
struct GPULight
{
	// all light types in a single struct
	//  - makes shadow map prioritization simpler
	//  - can then use a single array (dynamic size, w/ offsets by type)
	//     -> MUCH faster shader compilation

	// TODO: several of the specific float values can utilize the 'shape_points' field (obviously renamed to something better)
	//   e.g. spot parameters

	vec3 position;
	uint type_flags;      // see light_constants.h
	vec3 direction;       // spot, directional & disc lights
	float affect_radius;  // the distance (from position) where this light affect its surroundings
	float spot_bounds_radius; // tighter bounds for spot; distance from 'position', along 'direction'
	float intensity;
	// uint uuid;   // needed here?

	float outer_angle;
	float fog_intensity;  // might be separate SSBO ? e.g. together w/ other fog/scattering stuff
	vec3 color;
	float inner_angle;

	vec4 shape_points[4];  // area: 4 points, tube: 2 end points + radius, sphere: radius, disc: radius
};

// @interop
struct LightShadowParams
{
	mat4 view_proj[6];  // storing only forward & up saves 192 bytes (480 -> 288)
	uvec4 atlas_rect[6];
};

struct AABB
{
	vec4 min;
	vec4 max;
};

// @interop
struct IndexRange
{
	uint start_index;
	uint count;
};

#define SSBO_CLUSTER_DISCOVERY_ro \
layout(std430, binding = SSBO_BIND_CLUSTER_DISCOVERY) readonly buffer ClusterDiscoverySSBO \
{ \
	uint num_active; \
	uint nonempty_clusters[]; \
}

#define SSBO_CLUSTER_DISCOVERY_wo \
layout(std430, binding = SSBO_BIND_CLUSTER_DISCOVERY) writeonly buffer ClusterDiscoverySSBO \
{ \
	uint num_active; \
	uint nonempty_clusters[]; \
}

#define SSBO_CLUSTER_DISCOVERY_rw \
layout(std430, binding = SSBO_BIND_CLUSTER_DISCOVERY) buffer ClusterDiscoverySSBO \
{ \
	uint num_active; \
	uint nonempty_clusters[]; \
}


#define SSBO_ALL_CLUSTER_LIGHTS_ro \
layout(std430, binding = SSBO_BIND_ALL_CLUSTER_LIGHTS) readonly buffer LightsIndexSSBO \
{ \
	uint all_lights_start_index; \
	uint all_lights_index[]; \
}

#define SSBO_ALL_CLUSTER_LIGHTS_rw \
layout(std430, binding = SSBO_BIND_ALL_CLUSTER_LIGHTS) buffer LightsIndexSSBO \
{ \
	uint all_lights_start_index; \
	uint all_lights_index[]; \
}
