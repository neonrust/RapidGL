#version 460 core

// https://lisyarus.github.io/blog/posts/compute-blur.html
//
// This source contains CONDITIONALcode:
//    if HORIZONTAL is defined includes code for the horizontal pass
//    if not defined, includes code for the vertical pass
// These must be processed by the host application; it's not supported by GLSL.

const uint GROUP_SIZE = 64;
const uint MAX_SIZE = 32;

layout(rgba32f, binding = 0) uniform image2D  u_input_color;
layout(rgba32f, binding = 1) uniform image2D  u_output_color;

uniform float u_weights[MAX_SIZE + 1];
uniform uint u_num_weights; // size of 'u_weights'

const uint MAX_CACHE_SIZE = GROUP_SIZE + MAX_SIZE;
shared vec4 cache[8 + 2*MAX_CACHE_SIZE];

//const int LOAD = (MAX_CACHE_SIZE + (GROUP_SIZE - 1)) / GROUP_SIZE;

#ifdef HORIZONTAL
layout(local_size_x = GROUP_SIZE, local_size_y = 1) in;
#else
layout(local_size_x = 1, local_size_y = GROUP_SIZE) in;
#endif

void main()
{
	uint M = u_num_weights - 1;
	uint N = 2*M + 1;
	uint cache_size = GROUP_SIZE + 2*M;
	uint load_size = (cache_size + (GROUP_SIZE - 1)) / GROUP_SIZE;

	ivec2 screen_size = imageSize(u_input_color);
	uvec2 pixel_id = gl_GlobalInvocationID.xy;
	ivec2 screen_pos = ivec2(pixel_id) + ivec2(0.5);

	// vec4 src_pixel = imageLoad(u_input_color, screen_pos);
	// imageStore(u_output_color, screen_pos, src_pixel.gbra);
	// return;

	uint origin = uint(gl_WorkGroupID.x) * GROUP_SIZE - M;

#ifdef HORIZONTAL
	uint screen_limit = screen_size.x;
#else
	uint screen_limit = screen_size.y;
#endif

	for (uint idx = 0; idx < load_size; ++idx)
	{
#ifdef HORIZONTAL
		uint local = pixel_id.x;
#else
		uint local = pixel_id.y;
#endif
		local = local * load_size + idx;

		if (local < cache_size)
		{
			int dist = int(origin) + int(local);
#ifdef HORIZONTAL
			ivec2 sample_pos = ivec2(dist, screen_pos.y);
#else
			ivec2 sample_pos = ivec2(screen_pos.x, dist);
#endif
			if (dist >= 0 && dist < screen_limit)
				cache[local] = imageLoad(u_input_color, sample_pos);
		}
	}

	memoryBarrierShared();
	barrier();

	if (screen_pos.x >= screen_size.x || screen_pos.y >= screen_size.y)
		return;

	vec4 sum = vec4(0);

	float _weights[MAX_SIZE + 1];
	for(int idx = 0; idx < MAX_SIZE + 1; ++idx)
		_weights[idx] = float(idx)/(MAX_SIZE + 1);

	for (int idx = 0; idx < N; ++idx)
	{
		ivec2 pos = screen_pos;
#ifdef HORIZONTAL
		pos += ivec2(idx - M, 0);
		pos.x = clamp(pos.x, 0, screen_size.x - 1);
		uint local = pos.x - origin;
#else
		pos += ivec2(0, idx - M);
		pos.y = clamp(pos.y, 0, screen_size.y - 1);
		uint local = pos.y - origin;
#endif

		float weight;
		if(idx < u_num_weights)
			weight = _weights[idx];
		else
			weight = _weights[2*u_num_weights - idx];

		sum += weight * cache[local];
	}

#ifdef HORIZONTAL
	sum = imageLoad(u_input_color, screen_pos) + vec4(u_weights[pixel_id.x % u_num_weights]);
#else
	sum = imageLoad(u_input_color, screen_pos) + vec4(u_weights[pixel_id.y % u_num_weights]);
#endif

	imageStore(u_output_color, screen_pos, sum);
}
