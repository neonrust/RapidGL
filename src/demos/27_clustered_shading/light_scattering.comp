#version 460 core

#include "shared.h"

#define GROUP_SIZE 8

#define MARCH_NUM_STEPS 64

const float TRANSMITTANCE_THRESHOLD = 0.01;
const float MAX_SCATTER_DISTANCE = 80;

layout(rgba32f, binding = 1) uniform image2D   u_output_color;
layout(binding = 2)          uniform sampler2D u_input_depth;
layout(binding = 3)          uniform sampler2D u_blue_noise;

layout(std430, binding = SSBO_BIND_LIGHTS) buffer LightsMgmtSSBO
{
	LightsManagement lights;
};

uniform vec3 u_fog_color;
uniform float u_fog_density;       // [ 0, 0.1 ]   (sensible)

uniform vec3  u_cam_pos;
uniform float u_near_z;
uniform float u_far_z;
uniform mat4  u_projection;
uniform mat4  u_view;
uniform mat4  u_inv_projection;
uniform mat4  u_inv_view;
uniform uvec3 u_cluster_resolution;
uniform uvec2 u_cluster_size_ss;
uniform float u_log_cluster_res_y;
uniform float u_time;
uniform int u_ray_march_noise;

//const float FOG_RADIANCE_SCALE = 1;
//const float FOG_DISTANCE_SCALE = 0.7;  // [ 0, 1 ]

const int _RED = 1;
const int _ORANGE = 2;
const int _YELLOW = 3;
const int _GREEN = 4;
const int _CYAN = 5;
const int _BLUE = 6;
const int _PINK = 7;

struct Ray
{
	vec3 start;
	vec3 direction;
	float max_length;
};

struct Sphere
{
	vec3 center;
	float radius;
};

struct SphericalCone
{
	Sphere sphere;
	vec3 axis;
	float angle;   // radians
};

struct RayResult
{
	bool has_enter;
	bool has_exit;
	float dist_enter;
	float dist_exit;
	vec3 p_enter;
	vec3 p_exit;
};


float atan_approx(float x);
bool solveQuadricRoots(float A, float B, float C, out float t1, out float t2);
float linearDepth(float depth);
uint computeClusterIndex(uvec3 cluster_coord);
uvec3 computeClusterCoord(vec2 screen_pos, float view_z);
float getSquareFalloffAttenuation(float distance_sq, float light_radius);
float getSpotAngleAttenuation(vec3 to_light, vec3 spot_axis, float outer_angle, float inner_angle);

// vec3 scatterLightsInCluster(Ray eye_ray, uvec3 cluster_coord, float max_depth);

vec3 scatterPointLight(Ray ray, PointLight light);
vec3 scatterSpotLight(Ray ray, SpotLight light);

bool castRay(Ray ray, Sphere sphere, out RayResult result);
bool castRay(Ray ray, SphericalCone cone, out RayResult result);
bool castRaySphericalCone(Ray ray, SphericalCone cone, out RayResult result);

vec3 rayPoint(Ray ray, float fraction);
float rayDistanceSq(Ray ray, vec3 point);
void rayRayDistance(Ray ray1, Ray ray2, out RayResult result);
float rayPointNearest(Ray ray, vec3 point);  // returns distance on 'ray' that is closest to 'point'
float vectorVectorAngle(vec3 v1_norm, vec3 v2_norm);
uint pcg_hash(uint seed);
float depthWorldSpaceDistance(vec2 texCoord, float depth);
float fadeByDistance(vec3 light_pos);
float hash13(vec2 uv, float time);
float hash12(vec2 p, float time);
vec3 hash33(vec2 p, float time);
float interleavedGradientNoise(vec2 pixel, int frame);

vec3 falseColor(float value);

float g_noise_offset = 0;
vec2 screen_pos;
vec2 screen_uv;
ivec2 pixel_id;

layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;
void main()
{
	vec2 screen_size = vec2(imageSize(u_output_color));
	pixel_id   = ivec2(gl_GlobalInvocationID.xy);

	// half resolution in X
	pixel_id.x *= 2;
	int pixel_x_offset = (pixel_id.y % 2);
	pixel_id.x -= pixel_x_offset;

	// skip invocations for pixels outside the screen
	if(pixel_id.x >= screen_size.x || pixel_id.y >= screen_size.y)
		return;

	screen_pos  = vec2(pixel_id) + vec2(0.5); // start at the center of each pixel

	// if(pixel_id == ivec2(screen_size.x/2, screen_size.y/4))
	// {
	// 	imageStore(u_output_color, ivec2(screen_pos), vec4(100, 100, 100, 1));
	// 	return;
	// }

	// float rnd = hash12(screen_pos, u_time);
	// imageStore(u_output_color, ivec2(pixel_id), vec4(vec3(rnd)*4, 1));
	// return;


	// draw "reticle" at the center of the screen, with some effort for "anti-aliasing" :)
	// this should not be in the final version!  ;)
	ivec2 center = ivec2(int(screen_size.x/2), int(screen_size.y/2));
	ivec2 diff = center - ivec2(screen_pos);
	if(abs(diff.x) <= 8 && abs(diff.y) <= 8)
	{
		if(abs(diff.x) == 8 || abs(diff.y) == 8)
		{
			imageStore(u_output_color, ivec2(pixel_id), vec4(0.8, 0.8, 0.8, 1));
		}
		else
			imageStore(u_output_color, ivec2(pixel_id), vec4(0.1, 0.8, 0.6, 1));
		return;
	}


	//vec2 screen_norm = (screen_pos*2 - vec2(screen_size)) / vec2(screen_size); // [ -1, 1 ]
	screen_uv = screen_pos/screen_size;
	vec2 screen_norm = screen_uv * 2 - 1;

	g_noise_offset = texture(u_blue_noise, screen_uv).r; // [ 0, 1 ]

	float view_z = texture(u_input_depth, screen_uv).r; // [ 0, 1 ]
	float frag_depth = linearDepth(view_z);
	float frag_dist = depthWorldSpaceDistance(screen_uv, view_z); // [ 0, u_far_z - u_near_z ]
	//  see clipToView()

	// if(frag_dist > (u_far_z - u_near_z - 1))
	// {
	// 	imageStore(u_output_color, ivec2(pixel_id), vec4(1, 0, 0, 1));
	// 	return;
	// }

 	// Compute ray direction in world space:
    // 1. Create a clip-space position (for the near plane, z = -1).
    vec2 ndc = screen_uv * 2.0 - 1.0;  // NDC in range [-1, 1]
    vec4 clipPos = vec4(ndc, -1.0, 1.0);
    // 2. Transform to view space using the inverse projection.
    vec4 viewPos = u_inv_projection * clipPos;
    viewPos /= viewPos.w; // perspective divide
    // In view space the ray direction is from the origin (camera) to viewPos.
    vec3 viewDir = normalize(viewPos.xyz);
    // 3. Transform the view direction to world space.
    Ray cam_ray;
    cam_ray.start = u_cam_pos;
    cam_ray.direction = normalize((u_inv_view * vec4(viewDir, 0.0)).xyz);
    cam_ray.max_length = frag_dist;


	vec3 fog_radiance = vec3(0);

	// TODO: iterate throught lights in this CLUSTER only
	for(uint idx = 0; idx < lights.num_point_lights; ++idx)
	{
		float visible = fadeByDistance(lights.point_lights[idx].position);
		if(visible > 1e-4)
			fog_radiance += visible * scatterPointLight(cam_ray, lights.point_lights[idx]);
	}

	// TODO: iterate throught lights in this CLUSTER only
	for(uint idx = 0; idx < lights.num_spot_lights; ++idx)
	{
		float visible = fadeByDistance(lights.point_lights[idx].position);
		if(visible > 1e-4)
			fog_radiance += visible * scatterSpotLight(cam_ray, lights.spot_lights[idx]);
	}

	// TODO: area lights
	//   I guess area light scattering could be approximated using a frustum (the shape, i.e. a cropped pyramid),
	//   with fall of in X and Y (from the center, outwards) as well as in Z (from the source outwards)
	//    (in light-space, naturally).
	//    Here's a daring 2d representation:
	//                  ____----
	//         ___---***     *
	//        |              |  fall off from center axis
	//      C |------------------> center (falling off from C)
	//        |___           |  fall-off from center axis
	//            ***----___ v
	//                      ****
	// Are the angle of the frustum sides always the same or a function of the width/height (on that axis) ?
	// If the latter, probably with a sqrt-like curvature, increasing fast in the beginning,
	// then asymptotically reaching a "max" angle (maybe 70-90 degrees?)
	// Pr maybe both width & height contribute to that curve?


/*
	// TODO: perform scattering per screen tile (frustlet)
	for(uint cluster_index = 0; cluster_index < u_cluster_resolution.x * u_cluster_resolution.y; ++cluster_index)
		fog_radiance += scatterLightsInCluster(eye_ray, cluster_index);
*/

	if(fog_radiance.r > 0 || fog_radiance.g > 0 || fog_radiance.b > 0)
	{
		fog_radiance *= u_fog_color;

		vec4 final_color = vec4(fog_radiance, 1);

		imageStore(u_output_color, pixel_id, final_color);
		// write the same color to the right-side pixel (staggered pattern)
		if(pixel_id.x < screen_size.x -1)
			imageStore(u_output_color, pixel_id + ivec2(1, 0), final_color);
	}
}

// vec3 scatterLightsInCluster(Ray eye_ray, uvec3 cluster_coord)
// {
// 	uint cluster_index = computeClusterIndex(cluster_coord);

// 	 // Calculate the point lights contribution
//    	uint light_index_offset = point_light_grid[cluster_index].offset;
//     uint light_count = point_light_grid[cluster_index].count;

// 	vec3 radiance = vec3(0);

//     for (uint i = 0; i < light_count; ++i)
//     {
//         uint light_index = point_light_index_list[light_index_offset + i];
// 		PointLight light = point_lights[light_index];

// 		radiance += scatterPointLight(eye_ray, light);
// 	}

// 	return radiance;
// }


const float FADE_START = MAX_SCATTER_DISTANCE;
const float FADE_END = FADE_START + MAX_SCATTER_DISTANCE/5;

float fadeByDistance(vec3 pos)
{
	vec3 to_pos = pos - u_cam_pos;
	float distance = length(to_pos);
	return 1 - smoothstep(FADE_START, FADE_END, distance);
}

float sampleLight(PointLight light, vec3 point);

vec3 scatterPointLight(Ray ray, PointLight light)
{
	Sphere light_sphere;
	light_sphere.center = light.position;
	light_sphere.radius = light.radius;

	RayResult result;
	if(! castRay(ray, light_sphere, result))
		return vec3(0);

	float enter = clamp(result.dist_enter, 0, ray.max_length);
	float exit = clamp(result.dist_exit, 0, ray.max_length);

	float thickness = exit - enter;
	if(thickness < 1e-2)
		return vec3(0);


	float stride = thickness / MARCH_NUM_STEPS;

	float noise = 0;
	int noise_anim = int(u_time * 120) % 64;
	if(u_ray_march_noise == 1)
		noise = hash12(screen_pos, 0);//u_time);
	else if(u_ray_march_noise == 2)
		noise = interleavedGradientNoise(pixel_id, noise_anim);
	// TODO: or blue noise (g_noise_offset)

	float radiance = 0;
	// compute absorption over this step (using Beer-Lambert law)
	float absorption = u_fog_density * stride;
	float exp_absorption = exp(-absorption);
	float stepOpacity = 1 - exp_absorption;
	float transmittance = 1;

	float noise_offset = noise*stride/2;
	float ray_t = enter + noise_offset;

	for(; ray_t < exit; ray_t += stride)
	{
		vec3 p_sample = rayPoint(ray, ray_t);
		float intensity = sampleLight(light, p_sample)*stride;

		radiance += transmittance * stepOpacity * intensity;
		transmittance *= exp_absorption;

		// if(transmittance < TRANSMITTANCE_THRESHOLD)
		// 	break;
	}
	// lastly, sample end-point
	vec3 p_sample = rayPoint(ray, ray_t);
	radiance += sampleLight(light, p_sample)*stride;

	return radiance * light.base.color;
}

float sampleLight(PointLight light, vec3 point)
{
	vec3 to_light = point - light.position;
	float distance_sq = dot(to_light, to_light);
	float intensity = getSquareFalloffAttenuation(distance_sq, light.radius*light.radius);
	return light.base.intensity * intensity;
}

float sampleLight(SpotLight spot, vec3 point);

vec3 scatterSpotLight(Ray ray, SpotLight spot)
{
	SphericalCone outer_cone;
	outer_cone.sphere.center  = spot.point.position;
	outer_cone.sphere.radius  = spot.point.radius;
	outer_cone.axis           = spot.direction;
	outer_cone.angle          = spot.outer_angle;

	RayResult outer_result;
	if(! castRaySphericalCone(ray, outer_cone, outer_result))
		return vec3(0);  // missed the entire cone

	float t_enter = min(outer_result.dist_enter, ray.max_length);
	float t_exit = min(outer_result.dist_exit, ray.max_length);

	// compute number of steps based on fixed step size
	//   - initial stride should be scaled by distance - maybe not
	//   - steadily increase stride for each step (i.e. getting further away from camera)
	// OR does it look better if the number of points are evenly spaced?
	// .  this seems to be the case.

	float thickness = t_exit - t_enter;
	if(thickness < 1e-2)
		return vec3(0);


	// vec3 p_enter = rayPoint(ray, cone_enter);
	// float dist_center = length(p_enter - spot.point.position);
	// if(dist_center >= spot.point.radius - 0.1)
	// 	return vec3(1, 0, 0);
	// else
	// 	return vec3(0, 1, 0);

	// Ray spot_ray;
	// spot_ray.start = spot.point.position;
	// spot_ray.direction = spot.direction;
	// float off_axis_sq = rayDistanceSq(spot_ray, point);
	// float L_at_point = dot(to_light, spot.direction);
	// float atten_axis = getSquareFalloffAttenuation(off_axis_sq, L_at_point);

	// vec3 to_light = p_enter - spot.point.position;
	// float center_distance_sq =  dot(to_light, to_light);
	// float apex_distance = sqrt(center_distance_sq);
	// if(apex_distance >= spot.point.radius - 0.1)
	// 	return vec3(0, 1, 0);
	// return vec3(apex_distance / spot.point.radius);

#if 0
		float normalized = thickness / spot.point.radius;
		return falseColor(normalized);
#endif


	float stride = thickness / MARCH_NUM_STEPS;

	float noise = 0;
	int noise_anim = int(u_time * 120) % 64;
	if(u_ray_march_noise == 1)
		noise = hash12(screen_pos, 0);//u_time);
	else if(u_ray_march_noise == 2)
		noise = interleavedGradientNoise(pixel_id, noise_anim);
	// TODO: or blue noise (g_noise_offset)

	float radiance = 0;
	// compute absorption over this step (using Beer-Lambert law)
	float absorption = u_fog_density * stride;
	float exp_absorption = exp(-absorption);
	float stepOpacity = 1 - exp_absorption;
	float transmittance = 1;

	float noise_offset = noise*stride/2;
	float ray_t = t_enter + noise_offset;

	for(; ray_t < t_exit; ray_t += stride)
	{
		vec3 p_sample = rayPoint(ray, ray_t);
		float intensity = sampleLight(spot, p_sample)*stride;


		// EXPERIMENT
		// dimmer if facing towards the direction of the light
		float along_axis = dot(p_sample - spot.point.position, spot.direction)/spot.point.radius;
		intensity *= 1 - along_axis;


		radiance += transmittance * stepOpacity * intensity;
		transmittance *= exp_absorption;

		// if(transmittance < TRANSMITTANCE_THRESHOLD)
		// 	break;
	}
	// lastly, sample end-point
	vec3 p_sample = rayPoint(ray, ray_t);
	radiance += sampleLight(spot, p_sample)*stride;

	// TODO: intensify (near center) if rays start inside cone and facing the light

	// more focused beam should be brighter?
	// radiance /= max(sin(spot.outer_angle), 1e-5);
	// however, pbr_lighting seems to do the opposite;
	//   behaves as if 'intensity' is per cone degree or something.

	return radiance * spot.point.base.color;
}

// Approximated distance from the apex to the sphere cap along a ray
// characterized by the cosine of the angle (cosAlpha) between the ray and the cone axis,
// given a cone length L and a small cone half-angle theta (in radians).
float approxDistanceToSphereCap(float cosAlpha, SphericalCone cone)
{
	float L = cone.sphere.radius;
    // Compute sin(alpha) from cos(alpha).
    float sinAlpha = sqrt(1.0 - cosAlpha * cosAlpha); // TODO: is this really faster? than cos() + sin()
    // Approximate T and R:
    float T = L / (1.0 + cone.angle);
    // R is not directly used separately since R/T approximates theta.
    // Thus, the formula becomes:
    // x_cap = T * (cosAlpha + sqrt(theta^2 - sinAlpha^2))
    return T * (cosAlpha + sqrt(cone.angle * cone.angle - sinAlpha * sinAlpha));
}

//#define SPHERE_CAP_ATT

float sampleLight(SpotLight spot, vec3 point)
{
	// attenuation along spot axis
	vec3 to_light = point - spot.point.position;
	float center_distance_sq =  dot(to_light, to_light);
#ifdef SPHERE_CAP_ATT
	float cos_point_angle = dot(normalize(point - spot.point.position), spot.direction);
	SphericalCone cone;
	// need only angle and radius
	cone.angle = spot.outer_angle;
	cone.sphere.radius = spot.point.radius;
	float radius_at_angle = approxDistanceToSphereCap(cos_point_angle, cone);
	float atten_center = getSquareFalloffAttenuation(center_distance_sq, radius_at_angle*radius_at_angle);
#else
	float atten_center = getSquareFalloffAttenuation(center_distance_sq, spot.point.radius*spot.point.radius);
#endif

	// Ray spot_ray;
	// spot_ray.start = spot.point.position;
	// spot_ray.direction = spot.direction;
	// float off_axis_sq = rayDistanceSq(spot_ray, point);
	// float L_at_point = dot(to_light, spot.direction);
	// float atten_axis = getSquareFalloffAttenuation(off_axis_sq, L_at_point);
	// atten_axis = 1;


	// attentuation towards the spot edges/periphery
	float atten_axis = getSpotAngleAttenuation(normalize(to_light), spot.direction, spot.outer_angle, 0);
	// atten_axis = 1;

	return spot.point.base.intensity * atten_center * atten_axis;
}

float atan_approx(float x)
{
    return (1.570796 * x) / (1 + abs(x));
}

uint computeClusterIndex(uvec3 cluster_coord)
{
    return cluster_coord.x + (u_cluster_resolution.x * (cluster_coord.y + u_cluster_resolution.y * cluster_coord.z));
}

uvec3 computeClusterCoord(vec2 screen_pos, float view_z)
{
    uint x = uint(screen_pos.x / u_cluster_size_ss.x);
	uint y = uint(screen_pos.y / u_cluster_size_ss.y);
	uint z = uint(log(view_z / u_near_z) * u_log_cluster_res_y);

    return uvec3(x, y, z);
}


float linearDepth(float depth)
{
	// convert a depth texture sample in range (-1, 1) to linear depth, ranged (near_z, far_z).
	float ndc          = depth * 2.0 - 1.0;
	float linear_depth = 2.0 * u_near_z * u_far_z / (u_far_z + u_near_z - ndc * (u_far_z - u_near_z));

	return linear_depth;
}


bool castRay(Ray ray, Sphere sphere, out RayResult result)
{
	result.has_enter = false;
	result.has_enter = false;

	vec3 center_to_ray = ray.start - sphere.center;

	float A = dot(ray.direction, ray.direction);
	float B = 2 * dot(center_to_ray, ray.direction);
	float C = dot(center_to_ray, center_to_ray) - sphere.radius*sphere.radius;

	if(! solveQuadricRoots(A, B, C, result.dist_enter, result.dist_exit))
		return false;

	// the sphere is entirely "behind"
	if(result.dist_enter < 0 && result.dist_exit < 0)
		return false;

	result.has_enter = true;
	result.p_enter = rayPoint(ray, result.dist_enter);
	result.has_exit = true;
	result.p_exit = rayPoint(ray, result.dist_exit);

	return true;
}

bool isCapIntersection(SphericalCone cone, vec3 sphere_p);

bool castRaySphericalCone(Ray ray, SphericalCone cone, out RayResult result)
{
	RayResult sphere_result;
	if(! castRay(ray, cone.sphere, sphere_result))
		return false;

	result.has_enter = false;
	result.has_exit = false;

	// use cap hits if present
	bool cap_enter = isCapIntersection(cone, sphere_result.p_enter);
	bool cap_exit = isCapIntersection(cone, sphere_result.p_exit);

	RayResult cone_result;
	bool cone_hit = false;
	if(! cap_enter || ! cap_exit)
	{
		cone_hit = castRay(ray, cone, cone_result);
		if(cone_hit && ! cone_result.has_enter && cone_result.has_exit)
		{
			// ensure the first dist is valid
			cone_result.dist_enter = cone_result.dist_exit;
			cone_result.has_enter = true;
			cone_result.has_exit = false;
		}
		if(! cone_hit && ! cap_enter && ! cap_exit)
			return false;
	}


	float t_enter = -1;
	if (cap_enter)
		t_enter = sphere_result.dist_enter;
	else if (cone_hit && cone_result.has_enter)
	{
		t_enter = cone_result.dist_enter;
		// "shift" the dist values one over
		cone_result.dist_enter = cone_result.dist_exit;
		cone_result.has_exit = false;
	}

	float t_exit = -1;
	if (cap_exit)
		t_exit = sphere_result.dist_exit;
	else if (cone_hit && cone_result.has_enter)
		t_exit = cone_result.dist_enter;

	if((cone_hit || cap_enter || cap_exit) && t_enter < 0)
		t_enter = 0; // ray starts inside the volume

	result.dist_enter = t_enter;
	result.dist_exit = t_exit;

	// result.has_enter = t_enter >= 0;
	// result.has_exit = t_exit >= 0;

	if(t_enter > t_exit)
	{
		float temp = t_enter;
		t_enter = t_exit;
		t_exit = temp;
	}

	result.p_enter = rayPoint(ray, result.dist_enter);
	result.p_exit = rayPoint(ray, result.dist_exit);

	return true;
}

bool castRay(Ray ray, SphericalCone cone, out RayResult result)
{
	vec3 center_to_ray = ray.start - cone.sphere.center; // aka CO
	float start_distance_sq = dot(center_to_ray, center_to_ray);

	float cos_theta = cos(cone.angle);
	float cos_theta_sq = cos_theta*cos_theta;
	float dir_axis_dot = dot(ray.direction, cone.axis);
	float CO_axis_dot = dot(center_to_ray, cone.axis);

	float A = dir_axis_dot*dir_axis_dot - cos_theta_sq;
	float B = 2 * (dir_axis_dot*CO_axis_dot - dot(ray.direction, center_to_ray)*cos_theta_sq);
	float C = CO_axis_dot*CO_axis_dot - start_distance_sq*cos_theta_sq;

	if(! solveQuadricRoots(A, B, C, result.dist_enter, result.dist_exit))
		return false;

	result.has_enter = false;
	result.has_exit = false;

	float L_eff = cone.sphere.radius * cos(cone.angle) + 1e-2; // precision issue?

	if(result.dist_enter > result.dist_exit)
	{
		float temp = result.dist_enter;
		result.dist_enter = result.dist_exit;
		result.dist_exit = temp;
	}

	vec3 p_enter = rayPoint(ray, result.dist_enter);
	float h_enter = dot(p_enter - cone.sphere.center, cone.axis);
	if(h_enter >= 0 && h_enter <= L_eff)  // intersection is on the "positive" side
	{
		result.has_enter = true;
		result.p_enter = p_enter;
	}

	vec3 p_exit = rayPoint(ray, result.dist_exit);
	float h_exit = dot(p_exit - cone.sphere.center, cone.axis);
	if(h_exit >= 0 && h_exit <= L_eff)  // intersection is on the "positive" side
	{
		result.has_exit = true;
		result.p_exit = p_exit;
	}

	return result.has_enter || result.has_exit;
}

bool isCapIntersection(SphericalCone cone, vec3 sphere_p)
{
	// this assumes 'sphere_p' is an intersection point on the sphere's surface
	vec3 to_point = sphere_p - cone.sphere.center;
	float h = dot(to_point, cone.axis);                // project vector on to the direction axis
//	assert(h <= cone.sphere.radius + 1e-2);
	float L_eff = cone.sphere.radius*cos(cone.angle);  // effective length of cone; where it intersects the sphere cap

	return h >= L_eff - 1e-3;
}

vec3 rayPoint(Ray ray, float fraction)
{
	return ray.start + ray.direction*fraction;
}

// from pbr_lighting.glh (slightly modified)
float getSquareFalloffAttenuation(float distance_sq, float light_radius_squared)
{
    // float distance_square = dot(pos_to_light, pos_to_light);
    float factor          = distance_sq / light_radius_squared;
    float smooth_factor   = max(1.0 - factor * factor, 0.0);

    return (smooth_factor * smooth_factor) / max(distance_sq, 1e-5);
}

float getSpotAngleAttenuation(vec3 to_light, vec3 spot_dir, float outer_angle, float inner_angle)
{
    // the scale and offset computations can be done CPU-side
    float cos_outer   = cos(outer_angle);
    // NOTE: in the real-world, the inner angle will most likely be nearly zero
    float spot_scale  = 1.0 / max(cos(inner_angle) - cos_outer, 1e-5);
    float spot_offset = -cos_outer * spot_scale;

    float cd          = dot(spot_dir, to_light);
    float attenuation = clamp(cd * spot_scale + spot_offset, 0.0, 1.0);

    return attenuation * attenuation;
}

float rayDistanceSq(Ray ray, vec3 point)
{
    vec3 v = cross(point - ray.start, ray.direction);
    return dot(v, v);
}

// calculate shortest distance between two rays
void rayRayDistance(Ray ray1, Ray ray2, out RayResult result)
{
	vec3 d1 = ray1.direction;
	vec3 d2 = ray2.direction;

	vec3 w0 = ray1.start - ray2.start;

	float a = 1;//dot(d1, d1); // always 1 if d1 is normalized
	float b = dot(d1, d2);
	float c = 1;//dot(d2, d2); // always 1 if d2 is normalized
	float d = dot(d1, w0);
	float e = dot(d2, w0);

	float denominator = a * c - b * b;

	if(abs(denominator) > 1e-6)
	{
		// clamp to ensure they are non-negative (since it's a ray)
		result.dist_enter = max((b * e - c * d) / denominator, 0);
		result.dist_exit = max((a * e - b * d) / denominator, 0);
	}
	else // rays are parallel
	{
		result.dist_enter = 0;
		// project onto ray2's direction
		result.dist_exit = max(dot(d2, w0) / c, 0);
	}

	result.p_enter = rayPoint(ray1, result.dist_enter); // point on ray1
	result.p_exit = rayPoint(ray2, result.dist_exit);   // point on ray2
}

float rayPointNearest(Ray ray, vec3 point)
{
	// Vector from the ray origin to the point
	vec3 w = point - ray.start;

	// Project vector w onto the ray direction
	float ray_t = dot(w, ray.direction);

	if(ray_t < 0.0)
		ray_t = 0;  // Closest point is the ray origin

	return ray_t;
}

float vectorVectorAngle(vec3 v1_norm, vec3 v2_norm)
{
	float cos_angle = clamp(dot(v1_norm, v2_norm), -1, 1);
	return acos(cos_angle);
}

float depthWorldSpaceDistance(vec2 texCoord, float depth)
{
    vec4 pos = vec4(texCoord*2 - 1, depth, 1);
    vec4 viewPos = u_inv_projection * pos;
    viewPos /= viewPos.w;

	return length(viewPos.xyz);
}

bool solveQuadricRoots(float squareCoeff, float linearCoeff, float constantCoeff, out float t1, out float t2)
{
	float A = 2*squareCoeff;
	float B = linearCoeff;
	float C = constantCoeff;

	float discriminant = B*B - 2*A*C;
	if(discriminant < 1e-4)
		return false;  // no real intersection

	// step 2: Solve the quadric equation
	float sqrt_discriminant = sqrt(discriminant);
	t1 = (-B - sqrt_discriminant) / A;
	t2 = (-B + sqrt_discriminant) / A;

	return true;
}

uint pcg_hash(uint seed)
{
	seed = seed * 747796405u + 2891336453u;
	seed = ((seed >> ((seed >> 28u) + 4u)) ^ seed) * 277803737u;
	return (seed >> 22u) ^ seed;
}

// from https://www.shadertoy.com/view/4djSRW
float hash13(vec2 uv, float time)
{
	vec3 p3 = vec3(uv, time);
	p3  = fract(p3 * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

float hash12(vec2 p, float time)
{
    vec2 pos = (p * 0.152 + time * 1500. + 50.0);
	vec3 p3  = fract(vec3(pos.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

vec3 hash33(vec2 p, float time)
{
	vec3 p3 = vec3(p, time);
	p3 = fract(p3 * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);
}

float interleavedGradientNoise(vec2 pixel, int frame)
{
    pixel += vec2(float(frame) * 5.588238f);
    return fract(52.9829189f * fract(0.06711056f*float(pixel.x) + 0.00583715f*float(pixel.y)));
}

vec3 falseColor(float value)
{
    value = clamp(value, 0, 1);

	// TODO: could do this in a more general way,
	//  but this is probably faster

	const float N = 8.0;      // number of sub-gradients
    const float w = 1.0 / N;

    const float v = 3;

    const vec3 c0 = vec3( 0,   0,  v/2);
    const vec3 c1 = vec3( 0,   0,   v);
	const vec3 c2 = vec3( 0,  v/2,  v);
	const vec3 c3 = vec3( 0,   v,   v);
    const vec3 c4 = vec3(v/2,  v,  v/2);
    const vec3 c5 = vec3( v,   v,   0);
    const vec3 c6 = vec3( v,  v/2,  0);
    const vec3 c7 = vec3( v,   0,   0);
    const vec3 c8 = vec3(v/2,  0,   0);

    if (value < 1*w)
    	return mix(c0, c1, (value - 0*w) * N);
    if (value < 2*w)
	    return mix(c1, c2, (value - 1*w) * N);
    if (value < 3*w)
    	return mix(c2, c3, (value - 2*w) * N);
    if (value < 4*w)
     	return mix(c3, c4, (value - 3*w) * N);
    if (value < 5*w)
      	return mix(c4, c5, (value - 4*w) * N);
	if (value < 6*w)
        return mix(c5, c6, (value - 5*w) * N);
    if (value < 7*w)
        return mix(c6, c7, (value - 6*w) * N);
	return mix(c7, c8, (value - 7*w) * N);
}

// Computes the sphere that 'closes off' the cone.
Sphere computeConeCapSphere(SphericalCone cone)
{
	float L = cone.sphere.radius;
	float cos_theta = cos(cone.angle);

    // Compute T (the distance along the axis from the apex to the sphere's center)
    float T = L / (1 + (1 / cos_theta));
    // Compute the sphere's radius
    float R = L / (1 + cos_theta);

    Sphere sphere;
    sphere.center = cone.sphere.center + cone.axis * T;
    sphere.radius = R;
    return sphere;
}
