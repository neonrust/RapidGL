#version 460 core
#include "shared.h"

layout(std430, binding = SSBO_BIND_CLUSTERS) buffer ClustersSSBO
{
	Cluster clusters[];
};

layout(std430, binding = SSBO_BIND_POINT_LIGHTS) buffer PointLightsSSBO
{
    PointLight point_lights[];
};

layout(std430, binding = SSBO_BIND_SPOT_LIGHTS) buffer SpotLightsSSBO
{
    SpotLight spot_lights[];
};

layout(std430, binding = SSBO_BIND_AREA_LIGHTS) buffer AreaLightsSSBO
{
    AreaLight area_lights[];
};

uniform mat4 u_view_matrix;

shared Cluster s_cluster;

shared uint s_cluster_index;
shared AABB s_cluster_aabb;

shared uint s_point_lights_count;
shared uint s_point_lights[CLUSTER_MAX_POINT_LIGHTS];
shared uint s_spot_lights_count;
shared uint s_spot_lights[CLUSTER_MAX_SPOT_LIGHTS];
shared uint s_area_lights_count;
shared uint s_area_lights[CLUSTER_MAX_AREA_LIGHTS];

bool sphereInsideAABB(vec3 center, float radius, AABB aabb);
float sqDistancePointAABB(vec3 point, AABB aabb);

// layout(local_size_x = CULL_LIGHTS_LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
	if(gl_LocalInvocationIndex == 0)
	{
		s_point_lights_count = 0;
		s_spot_lights_count = 0;
		s_area_lights_count = 0;

		s_cluster_index = gl_WorkGroupID.x;
		s_cluster_aabb = clusters[s_cluster_index].aabb;
	}
	barrier();

    const uint THREADS_COUNT = gl_WorkGroupSize.x;

    // TODO: maybe divide the lights using some spatial partitioning

    // Intersect point lights against AABBs.
    for (uint idx = gl_LocalInvocationIndex; idx < point_lights.length(); idx += THREADS_COUNT)
    {
        PointLight light = point_lights[idx];

        if (light.base.intensity > 0 && sphereInsideAABB(light.position, light.radius, s_cluster_aabb))
        {
            uint last_index = atomicAdd(s_point_lights_count, 1);

            if (last_index < CLUSTER_MAX_POINT_LIGHTS)
                s_point_lights[last_index] = idx;
        }
    }

    // Intersect spot lights against AABBs
    // Treating spot lights as spheres not cones.
    // Feel free to make a pull request if you find any good cone-AABB intersection test.
    for (uint idx = gl_LocalInvocationIndex; idx < spot_lights.length(); idx += THREADS_COUNT)
    {
        SpotLight light = spot_lights[idx];

        // TODO: more precise bounding volume than a sphere?
        if (light.point.base.intensity > 0 && sphereInsideAABB(light.point.position, light.point.radius, s_cluster_aabb))
        {
            uint last_index = atomicAdd(s_spot_lights_count, 1);

            if (last_index < CLUSTER_MAX_SPOT_LIGHTS)
                s_spot_lights[last_index] = idx;
        }
    }

    // Intersect area lights against AABBs
    // Treating area lights as spheres not rectangles.
    for (uint idx = gl_LocalInvocationIndex; idx < area_lights.length(); idx += THREADS_COUNT)
    {
        AreaLight light = area_lights[idx];

        if (light.base.intensity > 0)
        {
            vec3 center = (light.points[1].xyz + light.points[2].xyz) / 2.0;
            float radius = 50.0 * light.base.intensity * distance(center, light.points[1].xyz);

            if (sphereInsideAABB(center, radius, s_cluster_aabb))
            {
                uint last_index = atomicAdd(s_area_lights_count, 1);

                if (last_index < CLUSTER_MAX_AREA_LIGHTS)
                    s_area_lights[last_index] = idx;
            }
        }
    }

    // We want all thread groups to have completed the light tests before continuing.
    barrier();

    if (gl_LocalInvocationIndex == 0) // only one thread needs to assign the result
	{
		clusters[s_cluster_index].visited = true;
    	clusters[s_cluster_index].num_point_lights = s_point_lights_count;
    	clusters[s_cluster_index].point_lights = s_point_lights;

     	clusters[s_cluster_index].num_spot_lights = s_spot_lights_count;
     	clusters[s_cluster_index].spot_lights = s_spot_lights;

     	clusters[s_cluster_index].num_area_lights = s_area_lights_count;
    	clusters[s_cluster_index].area_lights = s_area_lights;
     }
}

bool sphereInsideAABB(vec3 center, float radius, AABB aabb)
{
    vec3 center_vs = vec3(u_view_matrix * vec4(center, 1));
    float squared_distance = sqDistancePointAABB(center_vs, aabb);

    return squared_distance <= (radius * radius);
}

float sqDistancePointAABB(vec3 point, AABB aabb)
{
	float sq_dist = 0.0;

	for (int idx = 0; idx < 3; ++idx)
	{
		float v = point[idx];

		float d;
		if (v < aabb.min[idx])
			d = aabb.min[idx] - v;
		if (v > aabb.max[idx])
			d = v - aabb.max[idx];
		sq_dist += d*d;
	}

	return sq_dist;
}
