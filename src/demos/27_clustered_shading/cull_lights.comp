#version 460 core
#include "shared-structs.glh"

layout(std430, binding = SSBO_BIND_CLUSTER_AABB) readonly buffer ClusterAABBSSBO
{
	AABB cluster_aabb[];
};

layout(std430, binding = SSBO_BIND_LIGHTS) readonly buffer LightsSSBO
{
	GPULight lights[];
};

SSBO_CLUSTER_DISCOVERY_ro;

layout(std430, binding = SSBO_BIND_CLUSTER_LIGHT_RANGE) writeonly buffer ClusterLightsSSBO
{
	IndexRange cluster_lights[];
};

SSBO_ALL_LIGHTS_rw;

uniform mat4 u_view_matrix;
uniform uint u_num_clusters;
uniform uint u_max_cluster_avg_lights;


shared uint s_cluster_index;
shared AABB s_cluster_aabb;

shared uint s_light_count;
shared uint s_light_list[CLUSTER_MAX_LIGHTS];

bool sphereInsideAABB(vec3 center, float radius, AABB aabb);
float sqDistancePointAABB(vec3 point, AABB aabb);

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main()
{
    if (gl_LocalInvocationIndex == 0) // once per cluster
    {
		// offset index into second half of "nonempty_clusters" (first half is flagged clusters)
		uint active_offset = u_num_clusters;
		s_cluster_index = nonempty_clusters[gl_WorkGroupID.x + active_offset];
		s_cluster_aabb = cluster_aabb[s_cluster_index];

		s_light_count = 0;
    }
    barrier();

    const uint THREADS_COUNT = gl_WorkGroupSize.x;

    // Intersect all lights against cluster AABB
    for (uint light_index = gl_LocalInvocationIndex; light_index < lights.length(); light_index += THREADS_COUNT)
    {
    	GPULight light = lights[light_index];

     	if(light.intensity < 1e-1)
      		continue;

		vec3 sphere_center;
		float sphere_radius = 0;   // if still 0 the below switch did not wrk

		uint light_type = light.type_flags & LIGHT_TYPE_MASK;

     	switch(light_type)
      	{
			case LIGHT_TYPE_POINT:
			{
				sphere_center = light.position;
				sphere_radius = light.radius;
			}
			break;

			case LIGHT_TYPE_SPOT:
			{
	         	sphere_center = light.position;
				sphere_radius = light.radius;
				// use minimal sphere bounds, if set
	        	if(light.spot_bounds_radius > 0)
	   			{
			  		sphere_radius = light.spot_bounds_radius;
			    	sphere_center = light.position + light.direction*sphere_radius;
				}
			}
			break;

			case LIGHT_TYPE_AREA:
			{
				// center from average of two diagonal points
	            sphere_center = (light.area_points[1].xyz + light.area_points[2].xyz) / 2;
	            // approximation of the light radius
	            sphere_radius = 50 * light.intensity * distance(sphere_center, light.area_points[1].xyz);
			}
			break;
		}

		bool affecting = light_type == LIGHT_TYPE_DIRECTIONAL \
			|| (sphere_radius > 0 && sphereInsideAABB(sphere_center, sphere_radius, s_cluster_aabb));
		if(affecting)
		{
			uint next_index = atomicAdd(s_light_count, 1);

			if (next_index < CLUSTER_MAX_LIGHTS)
				s_light_list[next_index] = light_index;
		}
    }

    // Wait for all threads (for this cluster) to complete the light tests
    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
    	// copy the light indices to the global list,
	    // and update the cluster's light range with the collected lights

		uint count = min(s_light_count, CLUSTER_MAX_LIGHTS);
		uint offset = atomicAdd(all_lights_start_index, count);

		for(uint idx = 0; idx < count; ++idx)
			all_lights_index[offset + idx] = s_light_list[idx];

		cluster_lights[s_cluster_index].start_index = offset;
		cluster_lights[s_cluster_index].count = s_light_count; // potentially greater than 'CLUSTER_MAX_LIGHTS'
	}
}

bool sphereInsideAABB(vec3 center, float radius, AABB aabb)
{
    center = vec3(u_view_matrix * vec4(center, 1.0));
    float squared_distance = sqDistancePointAABB(center, aabb);

    return squared_distance <= (radius * radius);
}

float sqDistancePointAABB(vec3 point, AABB aabb)
{
    float sq_dist = 0.0;

    for (int i = 0; i < 3; ++i)
    {
        float v = point[i];

        if (v < aabb.min[i]) sq_dist += pow(aabb.min[i] - v, 2);
        if (v > aabb.max[i]) sq_dist += pow(v - aabb.max[i], 2);
    }

    return sq_dist;
}
