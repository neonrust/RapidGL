#version 460 core
#include "shared-structs.glh"

layout(std430, binding = SSBO_BIND_SIMPLE_CLUSTERS_AABB) buffer ClustersSimpleSSBO
{
	SimpleCluster clusters[];
};

layout(std430, binding = SSBO_BIND_LIGHTS) buffer LightsMgmtSSBO
{
	LightsManagement lights;
};

layout(std430, binding = SSBO_BIND_CLUSTER_DISCOVERY) buffer ClusterDiscoverySSBO
{
	uint num_active;
	uint nonempty_clusters[];      // size = range * 2
	//  range = u_num_clusters
	//    nonempty 0 - range-1
	//    active   range - 2*range-1
};

uniform mat4 u_view_matrix;
uniform uint u_num_clusters;
uniform uint u_max_cluster_avg_lights;


shared uint s_cluster_index;
shared AABB s_cluster_aabb;

shared uint s_point_lights_count;
shared uint s_point_lights_list[CLUSTER_MAX_POINT_LIGHTS];

shared uint s_spot_lights_count;
shared uint s_spot_lights_list[CLUSTER_MAX_SPOT_LIGHTS];

shared uint s_area_lights_count;
shared uint s_area_lights_list[CLUSTER_MAX_AREA_LIGHTS];

bool sphereInsideAABB(vec3 center, float radius, AABB aabb);
float sqDistancePointAABB(vec3 point, AABB aabb);

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint index = 0;

    if (gl_LocalInvocationIndex == 0) // once per cluster
    {
	    uint active_offset = u_num_clusters;
	    s_cluster_index = nonempty_clusters[gl_WorkGroupID.x + active_offset];
	    s_cluster_aabb = clusters[s_cluster_index].aabb;

	    s_point_lights_count = 0;
        s_spot_lights_count = 0;
        s_area_lights_count = 0;
    }
    barrier();

    const uint THREADS_COUNT = gl_WorkGroupSize.x;

    // Intersect point lights against AABBs.
    for (uint i = gl_LocalInvocationIndex; i < lights.num_point_lights; i += THREADS_COUNT)
    {
        PointLight light = lights.point_lights[i];

        if (light.base.intensity > 0 && sphereInsideAABB(light.position, light.radius, s_cluster_aabb))
        {
            index = atomicAdd(s_point_lights_count, 1);

            if (index < CLUSTER_MAX_POINT_LIGHTS)
                s_point_lights_list[index] = i;
            else
            	; // TODO: replace a less-prio light?
        }
    }

    // Intersect spot lights against AABBs
    // Treating spot lights as spheres not cones.
    // Feel free to make a pull request if you find any good cone-AABB intersection test.
    for (uint i = gl_LocalInvocationIndex; i < lights.num_spot_lights; i += THREADS_COUNT)
    {
        SpotLight light = lights.spot_lights[i];

        if (light.point.base.intensity > 0)
       	{
        	float radius = light.point.radius;
         	vec3 center = light.point.position;
        	if(light.bounds_radius > 0)
	        {
				// use minimal sphere bounds, if set
	       		radius = light.bounds_radius;
	         	center = light.point.position + light.direction*radius;
			}
       		if(sphereInsideAABB(center, radius, s_cluster_aabb))
	        {
	            index = atomicAdd(s_spot_lights_count, 1);

	            if (index < CLUSTER_MAX_SPOT_LIGHTS)
	                s_spot_lights_list[index] = i;
				else
	            	; // TODO: replace a less-prio light?
	        }
		}
    }

    // Intersect area lights against AABBs
    // Treating area lights as spheres not rectangles.
    for (uint i = gl_LocalInvocationIndex; i < lights.num_area_lights; i += THREADS_COUNT)
    {
        AreaLight light = lights.area_lights[i];

        if (light.base.intensity > 0)
        {
            vec3 center = (light.points[1].xyz + light.points[2].xyz) / 2.0;
            float radius = 50.0 * light.base.intensity * distance(center, light.points[1].xyz);

            if (sphereInsideAABB(center, radius, s_cluster_aabb))
            {
                index = atomicAdd(s_area_lights_count, 1);

                if (index < CLUSTER_MAX_AREA_LIGHTS)
                    s_area_lights_list[index] = i;
                else
                    ; // TODO: replace a less-prio light?
            }
        }
    }

    // Wait for all threads (for this cluster) to complete the light tests before continuing
    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
	    // Update the cluster's light list with the collected lights
    	SimpleCluster cluster = clusters[s_cluster_index];

     	cluster.num_point_lights = s_point_lights_count;
      	cluster.num_spot_lights  = s_spot_lights_count;
       	cluster.num_area_lights  = s_area_lights_count;

		for(uint idx = 0; idx < cluster.num_point_lights; ++idx)
			cluster.light_index[idx] = s_point_lights_list[idx];

		uint index_offset = CLUSTER_MAX_POINT_LIGHTS;
		for(uint idx = 0; idx < cluster.num_spot_lights; ++idx)
			cluster.light_index[idx + index_offset] = s_spot_lights_list[idx];

		index_offset += CLUSTER_MAX_SPOT_LIGHTS;
		for(uint idx = 0; idx < cluster.num_area_lights; ++idx)
			cluster.light_index[idx + index_offset] = s_area_lights_list[idx];

		clusters[s_cluster_index] = cluster;
    }
}

bool sphereInsideAABB(vec3 center, float radius, AABB aabb)
{
    center = vec3(u_view_matrix * vec4(center, 1.0));
    float squared_distance = sqDistancePointAABB(center, aabb);

    return squared_distance <= (radius * radius);
}

float sqDistancePointAABB(vec3 point, AABB aabb)
{
    float sq_dist = 0.0;

    for (int i = 0; i < 3; ++i)
    {
        float v = point[i];

        if (v < aabb.min[i]) sq_dist += pow(aabb.min[i] - v, 2);
        if (v > aabb.max[i]) sq_dist += pow(v - aabb.max[i], 2);
    }

    return sq_dist;
}
