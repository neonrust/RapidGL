#version 460 core
#include "shared.h"

layout(std430, binding = SSBO_BIND_CLUSTERS) buffer ClustersSSBO
{
	// ClusterAABB clusters[];
	Cluster clusters[];
};

// uniforms
uniform uvec3 u_grid_dim;
uniform uvec2 u_cluster_size_ss; // the size of the cluster in screen space (pixels)
uniform float u_near_k;

uniform float u_near_z;
uniform mat4  u_inv_projection;
uniform vec2  u_pixel_size;

// Structs
struct Plane
{
	vec3  normal;
	float offset;
};

// Functions' prototypes
vec3  clipToView           (vec4 clip);
vec3  screenToView         (vec4 screen);
vec3  lineIntersectionPlane(vec3 a, vec3 b, Plane p);
uvec3 computeClusterCoord  (uint cluster_index);

// all planes face the camera, in view-space so parallel to the near and far planes
const vec3 AXIS_Z = vec3(0, 0, 1);

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main()
{
	// uint  cluster_index = gl_GlobalInvocationID.x;
	uint cluster_index = gl_WorkGroupID.x + (gl_WorkGroupID.y * u_grid_dim.x) +
        (gl_WorkGroupID.z * u_grid_dim.x * u_grid_dim.y);
    uvec3 cluster_coord = gl_WorkGroupID;//computeClusterCoord(cluster_index);

	// Near and far values of the cluster in view space
	//   exponentially farther away
	Plane near_plane = Plane(AXIS_Z, -u_near_z * pow(abs(u_near_k), cluster_coord.z    ));
	Plane far_plane  = Plane(AXIS_Z, -u_near_z * pow(abs(u_near_k), cluster_coord.z + 1));

	// The top-left and bottom-right points respectively of the cluster k in screen space.
	vec4 p_min = vec4( cluster_coord.xy      * u_cluster_size_ss, 1, 1); // Top left in screen space
	vec4 p_max = vec4((cluster_coord.xy + 1) * u_cluster_size_ss, 1, 1); // Bottom right in screen space

	vec3 view_min = screenToView(p_min); // Top left in screen space
	vec3 view_max = screenToView(p_max); // Bottom right in screen space

	// Eye pos in view space is at the origin
	const vec3 eye_pos = vec3(0);

	// Find the min and max points on the near and far planes.
	vec3 near_min = lineIntersectionPlane(eye_pos, view_min, near_plane);
	vec3 near_max = lineIntersectionPlane(eye_pos, view_max, near_plane);
	vec3 far_min =  lineIntersectionPlane(eye_pos, view_min, far_plane);
	vec3 far_max =  lineIntersectionPlane(eye_pos, view_max, far_plane);

	vec3 min_aabb = min(near_min, min(near_max, min(far_min, far_max)));
	vec3 max_aabb = max(near_min, max(near_max, max(far_min, far_max)));

	clusters[cluster_index].aabb = AABB(vec4(min_aabb, 1), vec4(max_aabb, 1));

	// also reset the light counters here
	clusters[cluster_index].num_point_lights = 0;
	clusters[cluster_index].num_spot_lights = 0;
	clusters[cluster_index].num_area_lights = 0;

	clusters[cluster_index].coord = cluster_coord;
}

uvec3 computeClusterCoord(uint cluster_index)
{
	uint x = cluster_index % u_grid_dim.x;
	uint y = cluster_index % (u_grid_dim.x * u_grid_dim.y) / u_grid_dim.x;
	uint z = cluster_index / (u_grid_dim.x * u_grid_dim.y);

	return uvec3(x, y, z);
}

/**
 * Find the intersection of a line segment with a plane.
 * This function will return true if an intersection point
 * was found or false if no intersection could be found.
 * Source: Real-time collision detection, Christer Ericson (2005)
 */
vec3 lineIntersectionPlane(vec3 a, vec3 b, Plane p)
{
	vec3 ab = b - a;

	//Computing the intersection length for the line and the plane
	float t = (p.offset - dot(p.normal, a)) / dot(p.normal, ab);

	//Computing the actual xyz position of the point along the line
	vec3 q = vec3(0);
	if (t >= 0 && t <= 1)  // there was an intersection
		q = a + t * ab;

	return q;
}

vec3 clipToView(vec4 clip)
{
	//View space transform
	vec4 view = u_inv_projection * clip;

	//Perspective projection
	view = view / view.w;

	return vec3(view);
}

vec3 screenToView(vec4 screen)
{
	// Convert to NDC
	vec2 texcoord = screen.xy * u_pixel_size;

	//Convert to clipSpace
	vec4 clip = vec4(vec2(texcoord.x, texcoord.y) * 2 - 1, screen.z, screen.w);

	return clipToView(clip);
}
