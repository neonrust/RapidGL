#version 460 core
#include "shared.h"

layout(std430, binding = CLUSTERS_SSBO_BINDING_INDEX) buffer ClustersSSBO
{
	ClusterAABB clusters[];
};

// uniforms
uniform uvec3 u_grid_dim;
uniform uvec2 u_cluster_size_ss; // the size of the cluster in screen space (pixels)
uniform float u_near_k;

uniform float u_near_z;
uniform mat4  u_inverse_projection;
uniform vec2  u_pixel_size;

// Structs
struct Plane
{
	vec3  N; // Plane normal
	float d; // Distance to origin
};

// Functions' prototypes
uvec3 computeClusterIndex3D   (uint cluster_index1D);
vec4  clipToView              (vec4 clip);
vec4  screenToView            (vec4 screen);
bool  lineIntersectionToZPlane(vec3 a, vec3 b, Plane p, out vec3 q);

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint  cluster_index1D = gl_GlobalInvocationID.x;
	uvec3 cluster_index3D = computeClusterIndex3D(cluster_index1D);

	// Near and far values of the cluster in view space
	Plane near_plane = Plane(vec3(0.0, 0.0, 1.0), -u_near_z * pow(abs(u_near_k), cluster_index3D.z    ));
	Plane far_plane  = Plane(vec3(0.0, 0.0, 1.0), -u_near_z * pow(abs(u_near_k), cluster_index3D.z + 1));

	// The top-left and bottom-right points respectively of the cluster k in screen space.
	vec4 p_min = vec4( cluster_index3D.xy      * u_cluster_size_ss, 1.0, 1.0); // Top left in screen space
	vec4 p_max = vec4((cluster_index3D.xy + 1) * u_cluster_size_ss, 1.0, 1.0); // Bottom right in screen space

	p_min = screenToView(p_min); // Top left in screen space
	p_max = screenToView(p_max); // Bottom right in screen space

	// Eye pos in view space is at the origin
	vec3 eye_pos = vec3(0.0);

	// Find the min and max points on the near and far planes.
	vec3 near_min, near_max, far_min, far_max;
	lineIntersectionToZPlane(eye_pos, vec3(p_min), near_plane, near_min);
	lineIntersectionToZPlane(eye_pos, vec3(p_max), near_plane, near_max);
	lineIntersectionToZPlane(eye_pos, vec3(p_min), far_plane,  far_min);
	lineIntersectionToZPlane(eye_pos, vec3(p_max), far_plane,  far_max);

	vec3 min_aabb = min(near_min, min(near_max, min(far_min, far_max)));
	vec3 max_aabb = max(near_min, max(near_max, max(far_min, far_max)));

	clusters[cluster_index1D].min = vec4(min_aabb.xyz, 1.0);
	clusters[cluster_index1D].max = vec4(max_aabb.xyz, 1.0);
}

uvec3 computeClusterIndex3D(uint cluster_index1D)
{
	uint x = cluster_index1D % u_grid_dim.x;
	uint y = cluster_index1D % (u_grid_dim.x * u_grid_dim.y) / u_grid_dim.x;
	uint z = cluster_index1D / (u_grid_dim.x * u_grid_dim.y);

	return uvec3(x, y, z);
}

/**
 * Find the intersection of a line segment with a plane.
 * This function will return true if an intersection point
 * was found or false if no intersection could be found.
 * Source: Real-time collision detection, Christer Ericson (2005)
 */
bool lineIntersectionToZPlane(vec3 a, vec3 b, Plane p, out vec3 q)
{
    vec3 ab = b - a;

    //Computing the intersection length for the line and the plane
    float t = (p.d - dot(p.N, a)) / dot(p.N, ab);

	bool intersects = (t >= 0.0 && t <= 1.0);

    //Computing the actual xyz position of the point along the line
	q = vec3(0);
    if (intersects)
	{
		q = a + t * ab;
	}
	
    return intersects;
}

vec4 clipToView(vec4 clip)
{
    //View space transform
    vec4 view = u_inverse_projection * clip;

    //Perspective projection
    view = view / view.w;
    
    return view;
}

vec4 screenToView(vec4 screen)
{
    // Convert to NDC
    vec2 texcoord = screen.xy * u_pixel_size;

    //Convert to clipSpace
    vec4 clip = vec4(vec2(texcoord.x, 1.0 - texcoord.y) * 2.0 - 1.0, screen.z, screen.w);

    return clipToView(clip);
}