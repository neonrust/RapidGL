#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct ClusterAABB
{
	vec4 minPoint;
	vec4 maxPoint;
};

// ssbo
layout(std430, binding = 0) buffer clustersSSBO
{
	ClusterAABB clusters[];
};

// uniforms
uniform float zNear;
uniform float zFar;
uniform vec2 clusterSize;
uniform vec2 viewPxSize;
uniform mat4 inverseProjection;

/* Function prototypes */
vec4 clipToView(vec4 clip);
vec4 screenToView(vec4 screen);
vec3 lineIntersectionToZPlane(vec3 A, vec3 B, float zDistance);

void main()
{
	// Eye pos in view space is at the origin
	vec3 eyePos = vec3(0.0);

	uint tileIndex = uint(dot(gl_GlobalInvocationID, vec3(1, gl_NumWorkGroups.x, gl_NumWorkGroups.x * gl_NumWorkGroups.y)));

	vec4 minPointSS = vec4( gl_WorkGroupID.xy      * clusterSize, -1.0, 1.0); // Top left in screen space
	vec4 maxPointSS = vec4((gl_WorkGroupID.xy + 1) * clusterSize, -1.0, 1.0); // Bottom right in screen space

	vec3 minPointVS = screenToView(minPointSS).xyz; // Bottom left
	vec3 maxPointVS = screenToView(maxPointSS).xyz; // Top right

	// Near and far values of the cluster in view space
	float clusterZNear = zNear * pow(zFar / zNear, float(gl_WorkGroupID.z)     / float(gl_NumWorkGroups.z));
	float clusterZFar  = zNear * pow(zFar / zNear, float(gl_WorkGroupID.z + 1) / float(gl_NumWorkGroups.z));

	vec3 minPointNear = lineIntersectionToZPlane(eyePos, minPointVS, clusterZNear);
	vec3 minPointFar  = lineIntersectionToZPlane(eyePos, minPointVS, clusterZFar);
	vec3 maxPointNear = lineIntersectionToZPlane(eyePos, maxPointVS, clusterZNear);
	vec3 maxPointFar  = lineIntersectionToZPlane(eyePos, maxPointVS, clusterZFar);

	vec3 minPointAABB = min(min(minPointNear, minPointFar), min(maxPointNear, maxPointFar));
	vec3 maxPointAABB = max(max(minPointNear, minPointFar), max(maxPointNear, maxPointFar));

	clusters[tileIndex].minPoint = vec4(minPointAABB, 1.0);
	clusters[tileIndex].maxPoint = vec4(maxPointAABB, 1.0);
}

//Creates a line from the eye to the screenpoint, then finds its intersection
//With a z oriented plane located at the given distance to the origin
vec3 lineIntersectionToZPlane(vec3 A, vec3 B, float zDistance){
    //Because this is a Z based normal this is fixed
    vec3 normal = vec3(0.0, 0.0, 1.0);

    vec3 ab =  B - A;

    //Computing the intersection length for the line and the plane
    float t = (zDistance - dot(normal, A)) / dot(normal, ab);

    //Computing the actual xyz position of the point along the line
    vec3 result = A + t * ab;
	
    return result;
}

vec4 clipToView(vec4 clip){
    //View space transform
    vec4 view = inverseProjection * clip;

    //Perspective projection
    view = view / view.w;
    
    return view;
}

vec4 screenToView(vec4 screen){
    //Convert to NDC
    vec2 texCoord = screen.xy * viewPxSize.xy;

    //Convert to clipSpace
    // vec4 clip = vec4(vec2(texCoord.x, 1.0 - texCoord.y)* 2.0 - 1.0, screen.z, screen.w);
    vec4 clip = vec4(vec2(texCoord.x, texCoord.y)* 2.0 - 1.0, screen.z, screen.w);
    //Not sure which of the two it is just yet

    return clipToView(clip);
}