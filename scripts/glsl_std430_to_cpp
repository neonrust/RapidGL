#! /usr/bin/env python3

"""
GLSL (std430) struct to C++23 (GLM) struct generator.
Usage:
    python glsl_to_cpp_std430.py mystructs.glsl -DMAX_POINT_LIGHTS=32 -DMAX_SPOT_LIGHTS=8

Outputs C++ structs with correct alignas, padding, and static_asserts for field offsets and sizeof.
"""

import re
import sys
from collections import namedtuple, OrderedDict
from datetime import datetime
import getpass
import os

indent = '\t'

# --- GLSL to C++ type mapping --- #
GLSL_TO_CPP = {
    'float':  ("float", 4, 4),
    'int':    ("int32_t", 4, 4),
    'uint':   ("uint32_t", 4, 4),
    'bool':   ("uint32_t", 4, 4),  # bool is 4 bytes in std430!
    'vec2':   ("glm::vec2", 8, 8),
    'vec3':   ("glm::vec3", 12, 16),  # align as vec4!
    'vec4':   ("glm::vec4", 16, 16),
    'ivec2':  ("glm::ivec2", 8, 8),
    'ivec3':  ("glm::ivec3", 12, 16),
    'ivec4':  ("glm::ivec4", 16, 16),
    'uvec2':  ("glm::uvec2", 8, 8),
    'uvec3':  ("glm::uvec3", 12, 16),
    'uvec4':  ("glm::uvec4", 16, 16),
    'bvec2':  ("glm::bvec2", 8, 8),
    'bvec3':  ("glm::bvec3", 12, 16),
    'bvec4':  ("glm::bvec4", 16, 16),
    'mat3':   ("glm::mat3", 48, 16),  # 3 vec4 columns, 16 aligned
    'mat4':   ("glm::mat4", 64, 16),
}

CPP_SCALAR_TYPES = {'float', 'int', 'uint', 'bool'}

# --- Struct definitions --- #
Field = namedtuple('Field', 'name type array array_size')
StructType = namedtuple('StructType', 'name fields')
Padding = namedtuple('Padding', 'name size')

class UnknownArraySizeError(ValueError):
	pass

# --- Argument parsing --- #
def parse_args():
    import argparse
    parser = argparse.ArgumentParser(description='GLSL std430 struct to C++ generator')
    parser.add_argument('glsl_file', type=argparse.FileType("r"), help='Input GLSL file with struct definitions')
    parser.add_argument('-D', action='append', default=[], metavar='NAME=VALUE',
                        help='Define constant (array size) as NAME=VALUE')
    return parser.parse_args()

def parse_defines(defines):
    """Parse -DNAME=VALUE flags into dictionary."""
    result = {}
    for d in defines:
        if '=' not in d:
            raise ValueError(f"Invalid define: {d}")
        k, v = d.split('=', 1)
        result[k.strip()] = int(v.strip())
    return result

# --- GLSL Struct Parsing --- #
def remove_comments(s):
    s = re.sub(r'//.*', '', s)
    s = re.sub(r'/\*.*?\*/', '', s, flags=re.DOTALL)
    return s

def parse_structs(glsl_src):
    """Parse structs into {name: StructType(fields)}."""
    structs = OrderedDict()
    # Regex to parse struct blocks
    struct_re = re.compile(
        r'struct\s+(\w+)\s*\{([^}]*)\};', re.DOTALL)
    field_re = re.compile(
        r'(\w+)\s+(\w+)(\s*\[\s*([^\]]+)\s*\])?\s*;')
    for struct_match in struct_re.finditer(glsl_src):
        struct_name = struct_match.group(1)
        body = struct_match.group(2)
        fields = []
        for field_match in field_re.finditer(body):
            ftype, fname, arr, arrsize = field_match.groups()
            array = arr is not None
            array_size = arrsize.strip() if array else None
            fields.append(Field(fname, ftype, array, array_size))
        structs[struct_name] = StructType(struct_name, fields)
    return structs

# --- std430 Layout Computation --- #
class LayoutComputer:
    def __init__(self, structs, constants):
        self.structs = structs
        self.constants = constants
        self.struct_sizes = {}  # name -> (size, alignment)
        self.struct_offsets = {}  # name -> {field: offset}
        self.padding_counter = 0

    def compute_all(self):
        for sname in self.structs:
            self.compute_struct(sname)

    def resolve_array_size(self, size_str):
        """Get static size, allow constants."""
        try:
            return int(size_str)
        except ValueError:
            if size_str in self.constants:
                return int(self.constants[size_str])
            else:
            	raise UnknownArraySizeError(size_str)

    def type_info(self, typ):
        """Return (cpp_type, size, align) for a type (scalar/vec/mat/struct)."""
        if typ in GLSL_TO_CPP:
            return GLSL_TO_CPP[typ]
        elif typ in self.structs:
            if typ not in self.struct_sizes:
                self.compute_struct(typ)
            size, align = self.struct_sizes[typ]
            return (typ, size, align)
        else:
            raise ValueError(f"Unknown type: {typ}")

    def align(self, offset, align):
        return ((offset + align - 1) // align) * align

    def compute_struct(self, sname):
        """Compute layout for struct sname, store in self.struct_sizes, self.struct_offsets."""
        struct = self.structs[sname]
        offset = 0
        max_align = 0
        offsets = {}
        fields_with_padding = []
        for field in struct.fields:
            # Field type info (scalar/vec/mat or nested struct)
            if field.array:
                # Array: align to base type, but in std430, arrays have element stride = align(base type) * ceil(size/align)
                base_typ, base_size, base_align = self.type_info(field.type)
                arr_len = self.resolve_array_size(field.array_size)
                align_req = base_align
                offset = self.align(offset, align_req)
                offsets[field.name] = offset
                max_align = max(max_align, align_req)
                # In std430, array stride: round base_size up to base_align (NO 16-byte rule, unlike std140)
                arr_stride = self.align(base_size, base_align)
                field_size = arr_stride * arr_len
                offset += field_size
            else:
                base_typ, base_size, base_align = self.type_info(field.type)
                align_req = base_align
                offset = self.align(offset, align_req)
                offsets[field.name] = offset
                max_align = max(max_align, align_req)
                offset += base_size

        # std430: struct size must be rounded up to struct's largest alignment (not always 16)
        struct_size = self.align(offset, max_align if max_align else 1)
        self.struct_sizes[sname] = (struct_size, max_align)
        self.struct_offsets[sname] = offsets

    def generate_cpp(self, sname, emitted=None):
        """Emit C++ struct for sname, with alignas, padding, and static_asserts."""
        if emitted is None:
            emitted = set()
        if sname in emitted:
            return ""
        emitted.add(sname)
        struct = self.structs[sname]
        offsets = self.struct_offsets[sname]
        out = []
        struct_size, struct_align = self.struct_sizes[sname]
        out.append(f"struct alignas({struct_align}) {sname}\n{{")
        last_offset = 0
        pad_idx = 0
        for field in struct.fields:
            field_offset = offsets[field.name]
            # Padding before field
            if field_offset > last_offset:
                pad_sz = field_offset - last_offset
                out.append(f"{indent}uint8_t _pad{pad_idx}[{pad_sz}];")
                pad_idx += 1
            # Field declaration
            if field.array:
                base_typ, base_size, base_align = self.type_info(field.type)
                arr_len = self.resolve_array_size(field.array_size)
                cpp_type = base_typ
                if base_typ in self.structs:
                    # Recursively emit nested struct
                    out.insert(0, self.generate_cpp(base_typ, emitted))
                decl = f"{indent}alignas({base_align}) {cpp_type} {field.name}[{arr_len}];"
            else:
                base_typ, base_size, base_align = self.type_info(field.type)
                cpp_type = base_typ
                if base_typ in self.structs:
                    # Recursively emit nested struct
                    out.insert(0, self.generate_cpp(base_typ, emitted))
                decl = f"{indent}alignas({base_align}) {cpp_type} {field.name};"
            out.append(decl)
            last_offset = field_offset + (self.align(base_size, base_align) * (self.resolve_array_size(field.array_size) if field.array else 1))
        # Final struct padding
        if last_offset < struct_size:
            pad_sz = struct_size - last_offset
            out.append(f"{indent}uint8_t _pad{pad_idx}[{pad_sz}];")
        # static_asserts for offsets
        out.append("};")
        for field in struct.fields:
            out.append(f"static_assert(offsetof({sname}, {field.name}) == {offsets[field.name]});")
        out.append(f"static_assert(sizeof({sname}) == {struct_size});")
        out.append('')
        return "\n".join(out)

# --- Main Entrypoint --- #
def main():
    args = parse_args()
    # TODO: also detect defines in the input file?
    constants = parse_defines(args.D)
    print("Defined constants:", file=sys.stderr)
    max_len = max(len(name) for name in constants)
    for name, value in sorted(constants.items()):
    	print(f"  {name:<{max_len}} = {value}", file=sys.stderr)

    # Read GLSL file
    glsl_src = args.glsl_file.read()

    glsl_src = remove_comments(glsl_src)
    structs = parse_structs(glsl_src)
    if not structs:
        print("No structs found in input file.", file=sys.stderr)
        sys.exit(1)

    # Compute all layouts
    layout = LayoutComputer(structs, constants)
    try:
    	layout.compute_all()
    except UnknownArraySizeError as uase:
        print(f"Array size not defined: {uase}; use -D.", file=sys.stderr)
        sys.exit(1)

    # Emit all structs in dependency order
    dt = datetime.now().replace(microsecond=0)
    print(f'// Generated with {sys.argv[0]} from {args.glsl_file.name} at {dt},')
    print(f'// by {getpass.getuser()} in {os.getcwd()}')
    print()
    print('#include <cstdint>')
    print('#include <cstddef>')
    print('#include <glm/vec2.hpp>')
    print('#include <glm/vec3.hpp>')
    print('#include <glm/vec4.hpp>')
    print('#include <glm/mat3x3.hpp>')
    print('#include <glm/mat4x4.hpp>')
    print()

    emitted = set()
    for sname in structs:
        print(layout.generate_cpp(sname, emitted))

if __name__ == "__main__":
    main()
